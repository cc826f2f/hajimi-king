# =================================================================================
# 🚀 创世版 GitHub 敏感信息搜索配置文件 v5.1 (Genesis Edition) 🚀
# 来自 https://linux.do/t/topic/820574/91
# =================================================================================
# 核心策略: 融合多维上下文、正则表达式与跨平台特征向量，实现从被动发现到主动预测的转变。
# 版本说明: 本版本为 v5.0 的终极形态，它不仅整合了 v4.1 的所有创意搜索亮点，
#           更引入了基于“意图”和“行为”的搜索(如Commit信息、错误日志)，将搜索
#           维度从静态代码扩展到开发者的动态行为。这是一个真正意义上的全域、
#           全时、全维度的敏感信息狩猎框架。
#
# 查询符号图例:
# 🎯 高信噪比: 命中率极高，误报少，优先扫描。
# 💡 创意拓展: 覆盖更广泛的场景，可能带来意外发现。
# 🔍 上下文关联: 结合API、URL或开发者行为，结果更真实。
# 🛡️ 防御性: 适合开发者自查项目是否存在硬编码。
# 🌍 广域搜索: 结果量大，信噪比低，用于初期“捞针”。
# 🔥 正则猎杀: 使用正则表达式，外科手术式精准打击特定格式密钥。
# =================================================================================

# --- 策略一：🌍 基础与广域搜索 (Basic & Broad-Spectrum) ---
# 起点，用于大范围捕捞，结果量大但信噪比低。
🌍 "api_key" in:file
🌍 "secret_key" in:file
🌍 "access_token" in:file
🌍 AIzaSy in:file # 专注Google API Key

# --- 策略二：🎯 精准配置文件搜索 (High-Precision Configs) ---
# 直接命中配置文件中的密钥赋值语句或特定文件名，效率最高。
🎯 AIzaSy filename:.env
🎯 AIzaSy filename:.env.local # 极高风险，本地环境变量不应被提交
🎯 AIzaSy filename:.env.development # 开发环境密钥也常常有效
🎯 AIzaSy filename:.env.production # 生产环境密钥，最高价值！
🎯 AIzaSy filename:.env.stage
💡 AIzaSy filename:.env.example # [v4.1精华] 寻找错误提交到示例文件中的真实密钥
🎯 "API_KEY=" filename:.env
🎯 filename:config extension:json
🎯 filename:config extension:yml
🎯 filename:credentials.json
🎯 filename:secrets.yml "api_key"
🎯 filename:secrets.json "api_key"
🎯 filename:secrets.toml # TOML格式
🎯 filename:*.p12
🎯 extension:pem "PRIVATE KEY"
🎯 filename:terraform.tfvars "api_key"
🎯 path:"/.vscode" filename:settings.json
🎯 filename:*.tfstate "access_key"
🎯 filename:.npmrc "_auth="
🎯 filename:.netrc "password"
🎯 filename:.pgpass

# --- 策略三：💡 按编程语言/框架深化 (Language & Framework Deep Dive) ---
# 深入代码和框架特定文件，寻找硬编码的密钥。
🛡️ AIzaSy language:python "API_KEY =" OR "API_KEY':"
🛡️ AIzaSy language:javascript "apiKey:" OR "apiKey ="
🛡️ AIzaSy language:go "apiKey :=" OR "ApiKey =" # [v4.1精华] Go特定语法
🛡️ AIzaSy language:ruby "API_KEY =>" # [v4.1精华] Ruby Hash语法
🛡️ AIzaSy language:java "final String API_KEY = \"AIzaSy" # [v4.1精华] Java常量
🛡️ AIzaSy language:swift "let apiKey = \"AIzaSy" # [v4.1精华] Swift常量
🛡️ language:php "define('API_KEY'"
💡 extension:ipynb "api_key" # Jupyter Notebooks 是泄露重灾区
🛡️ filename:settings.py "SECRET_KEY" language:python # Django 框架
🛡️ filename:database.yml "password:" language:yaml # Ruby on Rails 框架
🛡️ filename:wp-config.php "AUTH_KEY" # WordPress
🛡️ extension:cs "connectionString" "password=" # .NET 数据库连接字符串

# --- 策略四：🔍 按上下文和路径关联 (Context & Path Correlation) ---
# 结合特定API端点、URL或特征路径，极大提高有效性。
🔍 AIzaSy path:deploy # [v4.1精华] 部署目录是高危区域
🔍 AIzaSy "maps.googleapis.com/maps/api"
🔍 AIzaSy "fcm.googleapis.com/fcm/send"
🔍 AIzaSy "generativelanguage.googleapis.com" # Gemini API 端点
🔍 "mongodb+srv://" "password" # MongoDB Atlas 连接字符串
🔍 "postgres://" "password" # PostgreSQL 连接字符串
🔍 path:config extension:json
🔍 path:/.aws/
🔍 path:/.gcp/
🔍 filename:"docker-compose.yml" "API_KEY"
🔍 filename:"kubernetes.yml" "secretKeyRef"

# --- 策略五：🧠 高级组合与排除法 (Advanced Logic & Exclusions) ---
# 运用逻辑组合，并排除模板、示例等常见干扰项。
🎯 "Authorization: Bearer"
🎯 "x-api-key:"
💡 extension:sh "export API_KEY="
💡 extension:json "api_key" NOT "example" NOT "YOUR_API_KEY" NOT "placeholder"
💡 extension:diff "+*API_KEY*AIzaSy" # 在代码变更(diff/patch)中寻找新增的密钥
💡 "google-services.json" in:file NOT path:app/src/debug # 排除安卓Debug路径

# --- 策略六：🎯 专题搜索：Google Gemini (专项打击) ---
# 对 Gemini 保持高强度聚焦。
🔍 "google.generativeai" "AIzaSy" language:python
🎯 AIzaSy "gemini" filename:.env
🎯 "GEMINI_API_KEY" "AIzaSy"
💡 AIzaSy "gemini" extension:ipynb
💡 AIzaSy "gemini" filename:config.json
💡 AIzaSy "gemini" filename:secrets.toml # [v4.1精华]

# --- 策略七：🕵️‍♂️ 剑走偏锋 · 行为与痕迹分析 (Unconventional & Behavioral Analysis) ---
# 覆盖开发者行为痕迹，往往是常规扫描的盲区。
💡 gist "api_key" # [v4.1精华] Gist 是公开代码片段的重灾区
💡 in:file:.bash_history "export"
💡 in:file:.zsh_history "export"
💡 extension:log "status=401" "key=" # [v4.1精华] 从失败日志中溯源
💡 "removed api key" in:commit # [v4.1精华] 搜索commit信息，密钥可能留在历史记录中
💡 filename:*.sql "INSERT INTO" "password" "values" # [v4.1精华] 数据库备份文件
💡 filename:"package.json" "proxy" "key=AIzaSy" # [v4.1精华] 搜索代理配置

# =================================================================================
# 🔥🔥🔥 策略八：专题突破 · 多平台正则猎杀 (v5.1核心) 🔥🔥🔥
#         --- Multi-Platform Regex & Keyword Kill Shot ---
#                 (利用正则表达式和高价值关键字，对各大主流平台进行毁灭性打击)
# =================================================================================

# --- 8.1 ☁️ 云服务商 (Cloud Providers) ---
🔥 "AKIA[0-9A-Z]{16}" # AWS Access Key ID
🔥 "(?i)aws(.{0,20})?(?-i)['\"][sS]ecret(?-i)['\"](.{0,20})?['\"][A-Za-z0-9\\/\\+]{40}['\"]" # AWS Secret Key (Regex)
🔍 "AWS_ACCESS_KEY_ID" filename:.env
🔍 "AWS_SECRET_ACCESS_KEY" filename:.env
🔍 "blob.core.windows.net" "access.key" # Azure Blob Storage
🔍 "AZURE_CLIENT_SECRET" filename:.env
🔍 filename:*.json "private_key" "client_email" "project_id" # GCP Service Account

# --- 8.2 🤖 AI & 大语言模型 (AI & LLM Platforms) ---
🔥 "sk-[a-zA-Z0-9]{48}" # OpenAI API Key (Legacy)
🔥 "sk-proj-[a-zA-Z0-9]{48}" # OpenAI API Key (Project-based)
🔥 "r8_[a-zA-Z0-9]{40}" # Replicate API Token
🔥 "hf_[a-zA-Z0-9]{35}" # Hugging Face Token
🔍 "OPENAI_API_KEY" filename:.env
🔍 "ANTHROPIC_API_KEY" filename:.env # Anthropic/Claude
🔍 "COHERE_API_KEY" filename:.env # Cohere
🔍 "HUGGING_FACE_HUB_TOKEN" filename:.env

# --- 8.3 💳 支付 & SaaS & API (Payment, SaaS & APIs) ---
🔥 "sk_live_[0-9a-zA-Z]{24}" # Stripe Live API Key
🔥 "rk_live_[0-9a-zA-Z]{24}" # Stripe Live Restricted Key
🔥 "sq0[a-z]{3}-[0-9a-zA-Z-]{20,}" # Square
🔥 "AC[a-f0-9]{32}" AND "AUTH_TOKEN" # Twilio Account SID & Auth Token
🔥 "SG\\.[a-zA-Z0-9_\\-]{66}" # SendGrid API Key
🔥 "xoxp-[0-9-]+" OR "xoxb-[0-9-]+" # Slack Token
🔥 "ghp_[a-zA-Z0-9]{36}" # GitHub Personal Access Token
🔥 "glpat-[a-zA-Z0-9-]{20}" # GitLab Personal Access Token
🔍 "TWILIO_ACCOUNT_SID" filename:.env
🔍 "STRIPE_API_KEY" filename:.env
🔍 "SLACK_BOT_TOKEN" filename:.env
🔍 "HEROKU_API_KEY" filename:.env

# --- 8.4 🔑 通用私钥 & 凭证 (Generic Private Keys & Credentials) ---
🔥 "-----BEGIN (RSA|OPENSSH|EC|PGP) PRIVATE KEY-----"
🔥 "jdbc:mysql://" "password="
🔥 "mongodb://d+:" # MongoDB
🔥 ".firebaseio.com"
🔥 "BEGIN_PRIVATE_KEY" extension:pem

# =================================================================================
# 迭代提示 (Pro Tips):
# 1. 猎杀优先级: `🔥` (正则猎杀) 是最高效的起点。紧随其后的是 `🎯` (高信噪比) 和 `🔍` (上下文关联)。
#    当针对特定目标时(如AWS)，直接跳到策略八对应小节。
# 2. 行为优先: 策略七 (行为与痕迹分析) 是本配置文件的灵魂。当常规代码搜索无果时，从开发者
#    的行为痕迹入手，往往能出奇制胜。
# 3. 攻防一体: 作为开发者，将此文件作为CI/CD流程的一部分，自动化扫描每一次提交，从源头杜绝泄露。
# 4. 超越已知: 真正的领先技术是创造规则，而不是遵循规则。关注新兴平台，分析其密钥格式，
#    为你自己的策略库添砖加瓦，这才是“创世版”的核心精神。
# =================================================================================